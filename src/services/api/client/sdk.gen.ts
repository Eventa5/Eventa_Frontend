// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, TDataShape } from "@hey-api/client-next";
import { client as _heyApiClient } from "./client.gen";
import type {
  GetApiV1CurrenciesData,
  GetApiV1CurrenciesResponse,
  GetApiV1UsersProfileData,
  GetApiV1UsersProfileError,
  GetApiV1UsersProfileResponse,
  PostApiV1CurrenciesData,
  PostApiV1CurrenciesError,
  PostApiV1CurrenciesResponse,
  PostApiV1UsersLoginData,
  PostApiV1UsersLoginError,
  PostApiV1UsersLoginResponse,
  PostApiV1UsersSignupData,
  PostApiV1UsersSignupError,
  PostApiV1UsersSignupResponse,
  PutApiV1UsersProfileData,
  PutApiV1UsersProfileError,
  PutApiV1UsersProfileResponse,
} from "./types.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get all currencies
 */
export const getApiV1Currencies = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1CurrenciesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<GetApiV1CurrenciesResponse, unknown, ThrowOnError>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/currencies",
    ...options,
  });
};

/**
 * Create a new currency
 */
export const postApiV1Currencies = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1CurrenciesData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1CurrenciesResponse,
    PostApiV1CurrenciesError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/currencies",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 用戶註冊
 * 創建新用戶帳號
 */
export const postApiV1UsersSignup = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1UsersSignupData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1UsersSignupResponse,
    PostApiV1UsersSignupError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 用戶登入
 * 用戶登入系統並獲取 JWT 認證 Token
 */
export const postApiV1UsersLogin = <ThrowOnError extends boolean = false>(
  options: Options<PostApiV1UsersLoginData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    PostApiV1UsersLoginResponse,
    PostApiV1UsersLoginError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/login",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * 獲取用戶資料
 * 獲取當前登入用戶的資料
 */
export const getApiV1UsersProfile = <ThrowOnError extends boolean = false>(
  options?: Options<GetApiV1UsersProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetApiV1UsersProfileResponse,
    GetApiV1UsersProfileError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/profile",
    ...options,
  });
};

/**
 * 更新用戶資料
 * 更新當前登入用戶的資料
 */
export const putApiV1UsersProfile = <ThrowOnError extends boolean = false>(
  options?: Options<PutApiV1UsersProfileData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).put<
    PutApiV1UsersProfileResponse,
    PutApiV1UsersProfileError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/users/profile",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};
